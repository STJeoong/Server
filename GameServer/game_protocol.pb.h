// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_5fprotocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fprotocol_2eproto;
namespace protocol {
namespace game {
class GameOver_Notify;
struct GameOver_NotifyDefaultTypeInternal;
extern GameOver_NotifyDefaultTypeInternal _GameOver_Notify_default_instance_;
class Move_Req;
struct Move_ReqDefaultTypeInternal;
extern Move_ReqDefaultTypeInternal _Move_Req_default_instance_;
class PlayerState;
struct PlayerStateDefaultTypeInternal;
extern PlayerStateDefaultTypeInternal _PlayerState_default_instance_;
class Update_Notify;
struct Update_NotifyDefaultTypeInternal;
extern Update_NotifyDefaultTypeInternal _Update_Notify_default_instance_;
class Vec2;
struct Vec2DefaultTypeInternal;
extern Vec2DefaultTypeInternal _Vec2_default_instance_;
class Welcome_Notify;
struct Welcome_NotifyDefaultTypeInternal;
extern Welcome_NotifyDefaultTypeInternal _Welcome_Notify_default_instance_;
}  // namespace game
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::game::GameOver_Notify* Arena::CreateMaybeMessage<::protocol::game::GameOver_Notify>(Arena*);
template<> ::protocol::game::Move_Req* Arena::CreateMaybeMessage<::protocol::game::Move_Req>(Arena*);
template<> ::protocol::game::PlayerState* Arena::CreateMaybeMessage<::protocol::game::PlayerState>(Arena*);
template<> ::protocol::game::Update_Notify* Arena::CreateMaybeMessage<::protocol::game::Update_Notify>(Arena*);
template<> ::protocol::game::Vec2* Arena::CreateMaybeMessage<::protocol::game::Vec2>(Arena*);
template<> ::protocol::game::Welcome_Notify* Arena::CreateMaybeMessage<::protocol::game::Welcome_Notify>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace game {

enum E_PacketID : int {
  MOVE_REQ = 0,
  UPDATE_NOTIFY = 1,
  WELCOME_NOTIFY = 2,
  GAME_START_NOTIFY = 3,
  GAME_OVER_NOTIFY = 4,
  E_PacketID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_PacketID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_PacketID_IsValid(int value);
constexpr E_PacketID E_PacketID_MIN = MOVE_REQ;
constexpr E_PacketID E_PacketID_MAX = GAME_OVER_NOTIFY;
constexpr int E_PacketID_ARRAYSIZE = E_PacketID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_PacketID_descriptor();
template<typename T>
inline const std::string& E_PacketID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_PacketID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_PacketID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_PacketID_descriptor(), enum_t_value);
}
inline bool E_PacketID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_PacketID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_PacketID>(
    E_PacketID_descriptor(), name, value);
}
enum E_RespCode : int {
  OK = 0,
  E_RespCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_RespCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_RespCode_IsValid(int value);
constexpr E_RespCode E_RespCode_MIN = OK;
constexpr E_RespCode E_RespCode_MAX = OK;
constexpr int E_RespCode_ARRAYSIZE = E_RespCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_RespCode_descriptor();
template<typename T>
inline const std::string& E_RespCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_RespCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_RespCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_RespCode_descriptor(), enum_t_value);
}
inline bool E_RespCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_RespCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_RespCode>(
    E_RespCode_descriptor(), name, value);
}
enum E_Direction : int {
  UP = 0,
  DOWN = 1,
  LEFT = 2,
  RIGHT = 3,
  E_Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_Direction_IsValid(int value);
constexpr E_Direction E_Direction_MIN = UP;
constexpr E_Direction E_Direction_MAX = RIGHT;
constexpr int E_Direction_ARRAYSIZE = E_Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_Direction_descriptor();
template<typename T>
inline const std::string& E_Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_Direction_descriptor(), enum_t_value);
}
inline bool E_Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_Direction>(
    E_Direction_descriptor(), name, value);
}
// ===================================================================

class Vec2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.game.Vec2) */ {
 public:
  inline Vec2() : Vec2(nullptr) {}
  ~Vec2() override;
  explicit PROTOBUF_CONSTEXPR Vec2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vec2(const Vec2& from);
  Vec2(Vec2&& from) noexcept
    : Vec2() {
    *this = ::std::move(from);
  }

  inline Vec2& operator=(const Vec2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec2& operator=(Vec2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vec2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vec2* internal_default_instance() {
    return reinterpret_cast<const Vec2*>(
               &_Vec2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vec2& a, Vec2& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vec2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vec2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vec2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vec2& from) {
    Vec2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.game.Vec2";
  }
  protected:
  explicit Vec2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.game.Vec2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class PlayerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.game.PlayerState) */ {
 public:
  inline PlayerState() : PlayerState(nullptr) {}
  ~PlayerState() override;
  explicit PROTOBUF_CONSTEXPR PlayerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerState(const PlayerState& from);
  PlayerState(PlayerState&& from) noexcept
    : PlayerState() {
    *this = ::std::move(from);
  }

  inline PlayerState& operator=(const PlayerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerState& operator=(PlayerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerState* internal_default_instance() {
    return reinterpret_cast<const PlayerState*>(
               &_PlayerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerState& a, PlayerState& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerState& from) {
    PlayerState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.game.PlayerState";
  }
  protected:
  explicit PlayerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .protocol.game.Vec2 pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::protocol::game::Vec2& pos() const;
  PROTOBUF_NODISCARD ::protocol::game::Vec2* release_pos();
  ::protocol::game::Vec2* mutable_pos();
  void set_allocated_pos(::protocol::game::Vec2* pos);
  private:
  const ::protocol::game::Vec2& _internal_pos() const;
  ::protocol::game::Vec2* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::protocol::game::Vec2* pos);
  ::protocol::game::Vec2* unsafe_arena_release_pos();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.game.PlayerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::game::Vec2* pos_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Welcome_Notify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.game.Welcome_Notify) */ {
 public:
  inline Welcome_Notify() : Welcome_Notify(nullptr) {}
  ~Welcome_Notify() override;
  explicit PROTOBUF_CONSTEXPR Welcome_Notify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Welcome_Notify(const Welcome_Notify& from);
  Welcome_Notify(Welcome_Notify&& from) noexcept
    : Welcome_Notify() {
    *this = ::std::move(from);
  }

  inline Welcome_Notify& operator=(const Welcome_Notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline Welcome_Notify& operator=(Welcome_Notify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Welcome_Notify& default_instance() {
    return *internal_default_instance();
  }
  static inline const Welcome_Notify* internal_default_instance() {
    return reinterpret_cast<const Welcome_Notify*>(
               &_Welcome_Notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Welcome_Notify& a, Welcome_Notify& b) {
    a.Swap(&b);
  }
  inline void Swap(Welcome_Notify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Welcome_Notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Welcome_Notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Welcome_Notify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Welcome_Notify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Welcome_Notify& from) {
    Welcome_Notify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Welcome_Notify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.game.Welcome_Notify";
  }
  protected:
  explicit Welcome_Notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .protocol.game.PlayerState players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::protocol::game::PlayerState* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::game::PlayerState >*
      mutable_players();
  private:
  const ::protocol::game::PlayerState& _internal_players(int index) const;
  ::protocol::game::PlayerState* _internal_add_players();
  public:
  const ::protocol::game::PlayerState& players(int index) const;
  ::protocol::game::PlayerState* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::game::PlayerState >&
      players() const;

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.game.Welcome_Notify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::game::PlayerState > players_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Move_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.game.Move_Req) */ {
 public:
  inline Move_Req() : Move_Req(nullptr) {}
  ~Move_Req() override;
  explicit PROTOBUF_CONSTEXPR Move_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Move_Req(const Move_Req& from);
  Move_Req(Move_Req&& from) noexcept
    : Move_Req() {
    *this = ::std::move(from);
  }

  inline Move_Req& operator=(const Move_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Move_Req& operator=(Move_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Move_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Move_Req* internal_default_instance() {
    return reinterpret_cast<const Move_Req*>(
               &_Move_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Move_Req& a, Move_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(Move_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Move_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Move_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Move_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Move_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Move_Req& from) {
    Move_Req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Move_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.game.Move_Req";
  }
  protected:
  explicit Move_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqIDFieldNumber = 1,
    kDirFieldNumber = 2,
  };
  // int32 seqID = 1;
  void clear_seqid();
  int32_t seqid() const;
  void set_seqid(int32_t value);
  private:
  int32_t _internal_seqid() const;
  void _internal_set_seqid(int32_t value);
  public:

  // .protocol.game.E_Direction dir = 2;
  void clear_dir();
  ::protocol::game::E_Direction dir() const;
  void set_dir(::protocol::game::E_Direction value);
  private:
  ::protocol::game::E_Direction _internal_dir() const;
  void _internal_set_dir(::protocol::game::E_Direction value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.game.Move_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t seqid_;
    int dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Update_Notify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.game.Update_Notify) */ {
 public:
  inline Update_Notify() : Update_Notify(nullptr) {}
  ~Update_Notify() override;
  explicit PROTOBUF_CONSTEXPR Update_Notify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Update_Notify(const Update_Notify& from);
  Update_Notify(Update_Notify&& from) noexcept
    : Update_Notify() {
    *this = ::std::move(from);
  }

  inline Update_Notify& operator=(const Update_Notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline Update_Notify& operator=(Update_Notify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Update_Notify& default_instance() {
    return *internal_default_instance();
  }
  static inline const Update_Notify* internal_default_instance() {
    return reinterpret_cast<const Update_Notify*>(
               &_Update_Notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Update_Notify& a, Update_Notify& b) {
    a.Swap(&b);
  }
  inline void Swap(Update_Notify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Update_Notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Update_Notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Update_Notify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Update_Notify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Update_Notify& from) {
    Update_Notify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Update_Notify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.game.Update_Notify";
  }
  protected:
  explicit Update_Notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kLpiFieldNumber = 1,
  };
  // repeated .protocol.game.PlayerState players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::protocol::game::PlayerState* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::game::PlayerState >*
      mutable_players();
  private:
  const ::protocol::game::PlayerState& _internal_players(int index) const;
  ::protocol::game::PlayerState* _internal_add_players();
  public:
  const ::protocol::game::PlayerState& players(int index) const;
  ::protocol::game::PlayerState* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::game::PlayerState >&
      players() const;

  // int32 lpi = 1;
  void clear_lpi();
  int32_t lpi() const;
  void set_lpi(int32_t value);
  private:
  int32_t _internal_lpi() const;
  void _internal_set_lpi(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.game.Update_Notify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::game::PlayerState > players_;
    int32_t lpi_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameOver_Notify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.game.GameOver_Notify) */ {
 public:
  inline GameOver_Notify() : GameOver_Notify(nullptr) {}
  ~GameOver_Notify() override;
  explicit PROTOBUF_CONSTEXPR GameOver_Notify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameOver_Notify(const GameOver_Notify& from);
  GameOver_Notify(GameOver_Notify&& from) noexcept
    : GameOver_Notify() {
    *this = ::std::move(from);
  }

  inline GameOver_Notify& operator=(const GameOver_Notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameOver_Notify& operator=(GameOver_Notify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameOver_Notify& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameOver_Notify* internal_default_instance() {
    return reinterpret_cast<const GameOver_Notify*>(
               &_GameOver_Notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameOver_Notify& a, GameOver_Notify& b) {
    a.Swap(&b);
  }
  inline void Swap(GameOver_Notify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameOver_Notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameOver_Notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameOver_Notify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameOver_Notify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameOver_Notify& from) {
    GameOver_Notify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameOver_Notify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.game.GameOver_Notify";
  }
  protected:
  explicit GameOver_Notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsWinFieldNumber = 1,
  };
  // bool isWin = 1;
  void clear_iswin();
  bool iswin() const;
  void set_iswin(bool value);
  private:
  bool _internal_iswin() const;
  void _internal_set_iswin(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.game.GameOver_Notify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool iswin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec2

// float x = 1;
inline void Vec2::clear_x() {
  _impl_.x_ = 0;
}
inline float Vec2::_internal_x() const {
  return _impl_.x_;
}
inline float Vec2::x() const {
  // @@protoc_insertion_point(field_get:protocol.game.Vec2.x)
  return _internal_x();
}
inline void Vec2::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vec2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protocol.game.Vec2.x)
}

// float y = 2;
inline void Vec2::clear_y() {
  _impl_.y_ = 0;
}
inline float Vec2::_internal_y() const {
  return _impl_.y_;
}
inline float Vec2::y() const {
  // @@protoc_insertion_point(field_get:protocol.game.Vec2.y)
  return _internal_y();
}
inline void Vec2::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vec2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protocol.game.Vec2.y)
}

// -------------------------------------------------------------------

// PlayerState

// int32 id = 1;
inline void PlayerState::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t PlayerState::_internal_id() const {
  return _impl_.id_;
}
inline int32_t PlayerState::id() const {
  // @@protoc_insertion_point(field_get:protocol.game.PlayerState.id)
  return _internal_id();
}
inline void PlayerState::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void PlayerState::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.game.PlayerState.id)
}

// .protocol.game.Vec2 pos = 2;
inline bool PlayerState::_internal_has_pos() const {
  return this != internal_default_instance() && _impl_.pos_ != nullptr;
}
inline bool PlayerState::has_pos() const {
  return _internal_has_pos();
}
inline void PlayerState::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
inline const ::protocol::game::Vec2& PlayerState::_internal_pos() const {
  const ::protocol::game::Vec2* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::game::Vec2&>(
      ::protocol::game::_Vec2_default_instance_);
}
inline const ::protocol::game::Vec2& PlayerState::pos() const {
  // @@protoc_insertion_point(field_get:protocol.game.PlayerState.pos)
  return _internal_pos();
}
inline void PlayerState::unsafe_arena_set_allocated_pos(
    ::protocol::game::Vec2* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.game.PlayerState.pos)
}
inline ::protocol::game::Vec2* PlayerState::release_pos() {
  
  ::protocol::game::Vec2* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::game::Vec2* PlayerState::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:protocol.game.PlayerState.pos)
  
  ::protocol::game::Vec2* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::protocol::game::Vec2* PlayerState::_internal_mutable_pos() {
  
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::game::Vec2>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::protocol::game::Vec2* PlayerState::mutable_pos() {
  ::protocol::game::Vec2* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:protocol.game.PlayerState.pos)
  return _msg;
}
inline void PlayerState::set_allocated_pos(::protocol::game::Vec2* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:protocol.game.PlayerState.pos)
}

// -------------------------------------------------------------------

// Welcome_Notify

// int32 id = 1;
inline void Welcome_Notify::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Welcome_Notify::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Welcome_Notify::id() const {
  // @@protoc_insertion_point(field_get:protocol.game.Welcome_Notify.id)
  return _internal_id();
}
inline void Welcome_Notify::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Welcome_Notify::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.game.Welcome_Notify.id)
}

// repeated .protocol.game.PlayerState players = 2;
inline int Welcome_Notify::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int Welcome_Notify::players_size() const {
  return _internal_players_size();
}
inline void Welcome_Notify::clear_players() {
  _impl_.players_.Clear();
}
inline ::protocol::game::PlayerState* Welcome_Notify::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.game.Welcome_Notify.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::game::PlayerState >*
Welcome_Notify::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:protocol.game.Welcome_Notify.players)
  return &_impl_.players_;
}
inline const ::protocol::game::PlayerState& Welcome_Notify::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::protocol::game::PlayerState& Welcome_Notify::players(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.Welcome_Notify.players)
  return _internal_players(index);
}
inline ::protocol::game::PlayerState* Welcome_Notify::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::protocol::game::PlayerState* Welcome_Notify::add_players() {
  ::protocol::game::PlayerState* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:protocol.game.Welcome_Notify.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::game::PlayerState >&
Welcome_Notify::players() const {
  // @@protoc_insertion_point(field_list:protocol.game.Welcome_Notify.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// Move_Req

// int32 seqID = 1;
inline void Move_Req::clear_seqid() {
  _impl_.seqid_ = 0;
}
inline int32_t Move_Req::_internal_seqid() const {
  return _impl_.seqid_;
}
inline int32_t Move_Req::seqid() const {
  // @@protoc_insertion_point(field_get:protocol.game.Move_Req.seqID)
  return _internal_seqid();
}
inline void Move_Req::_internal_set_seqid(int32_t value) {
  
  _impl_.seqid_ = value;
}
inline void Move_Req::set_seqid(int32_t value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:protocol.game.Move_Req.seqID)
}

// .protocol.game.E_Direction dir = 2;
inline void Move_Req::clear_dir() {
  _impl_.dir_ = 0;
}
inline ::protocol::game::E_Direction Move_Req::_internal_dir() const {
  return static_cast< ::protocol::game::E_Direction >(_impl_.dir_);
}
inline ::protocol::game::E_Direction Move_Req::dir() const {
  // @@protoc_insertion_point(field_get:protocol.game.Move_Req.dir)
  return _internal_dir();
}
inline void Move_Req::_internal_set_dir(::protocol::game::E_Direction value) {
  
  _impl_.dir_ = value;
}
inline void Move_Req::set_dir(::protocol::game::E_Direction value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:protocol.game.Move_Req.dir)
}

// -------------------------------------------------------------------

// Update_Notify

// int32 lpi = 1;
inline void Update_Notify::clear_lpi() {
  _impl_.lpi_ = 0;
}
inline int32_t Update_Notify::_internal_lpi() const {
  return _impl_.lpi_;
}
inline int32_t Update_Notify::lpi() const {
  // @@protoc_insertion_point(field_get:protocol.game.Update_Notify.lpi)
  return _internal_lpi();
}
inline void Update_Notify::_internal_set_lpi(int32_t value) {
  
  _impl_.lpi_ = value;
}
inline void Update_Notify::set_lpi(int32_t value) {
  _internal_set_lpi(value);
  // @@protoc_insertion_point(field_set:protocol.game.Update_Notify.lpi)
}

// repeated .protocol.game.PlayerState players = 2;
inline int Update_Notify::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int Update_Notify::players_size() const {
  return _internal_players_size();
}
inline void Update_Notify::clear_players() {
  _impl_.players_.Clear();
}
inline ::protocol::game::PlayerState* Update_Notify::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.game.Update_Notify.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::game::PlayerState >*
Update_Notify::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:protocol.game.Update_Notify.players)
  return &_impl_.players_;
}
inline const ::protocol::game::PlayerState& Update_Notify::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::protocol::game::PlayerState& Update_Notify::players(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.Update_Notify.players)
  return _internal_players(index);
}
inline ::protocol::game::PlayerState* Update_Notify::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::protocol::game::PlayerState* Update_Notify::add_players() {
  ::protocol::game::PlayerState* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:protocol.game.Update_Notify.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::game::PlayerState >&
Update_Notify::players() const {
  // @@protoc_insertion_point(field_list:protocol.game.Update_Notify.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// GameOver_Notify

// bool isWin = 1;
inline void GameOver_Notify::clear_iswin() {
  _impl_.iswin_ = false;
}
inline bool GameOver_Notify::_internal_iswin() const {
  return _impl_.iswin_;
}
inline bool GameOver_Notify::iswin() const {
  // @@protoc_insertion_point(field_get:protocol.game.GameOver_Notify.isWin)
  return _internal_iswin();
}
inline void GameOver_Notify::_internal_set_iswin(bool value) {
  
  _impl_.iswin_ = value;
}
inline void GameOver_Notify::set_iswin(bool value) {
  _internal_set_iswin(value);
  // @@protoc_insertion_point(field_set:protocol.game.GameOver_Notify.isWin)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game
}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::game::E_PacketID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::game::E_PacketID>() {
  return ::protocol::game::E_PacketID_descriptor();
}
template <> struct is_proto_enum< ::protocol::game::E_RespCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::game::E_RespCode>() {
  return ::protocol::game::E_RespCode_descriptor();
}
template <> struct is_proto_enum< ::protocol::game::E_Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::game::E_Direction>() {
  return ::protocol::game::E_Direction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto
