// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_db_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_db_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_db_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_db_5fprotocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_5fprotocol_2eproto;
namespace protocol {
namespace db {
class Login_Req;
struct Login_ReqDefaultTypeInternal;
extern Login_ReqDefaultTypeInternal _Login_Req_default_instance_;
class Login_Resp;
struct Login_RespDefaultTypeInternal;
extern Login_RespDefaultTypeInternal _Login_Resp_default_instance_;
}  // namespace db
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::db::Login_Req* Arena::CreateMaybeMessage<::protocol::db::Login_Req>(Arena*);
template<> ::protocol::db::Login_Resp* Arena::CreateMaybeMessage<::protocol::db::Login_Resp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace db {

enum E_PacketID : int {
  LOGIN_REQUSET = 0,
  LOGIN_RESPONSE = 1,
  E_PacketID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_PacketID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_PacketID_IsValid(int value);
constexpr E_PacketID E_PacketID_MIN = LOGIN_REQUSET;
constexpr E_PacketID E_PacketID_MAX = LOGIN_RESPONSE;
constexpr int E_PacketID_ARRAYSIZE = E_PacketID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_PacketID_descriptor();
template<typename T>
inline const std::string& E_PacketID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_PacketID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_PacketID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_PacketID_descriptor(), enum_t_value);
}
inline bool E_PacketID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_PacketID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_PacketID>(
    E_PacketID_descriptor(), name, value);
}
enum E_RespCode : int {
  OK = 0,
  LOGIN_INVALID_PW = 10,
  E_RespCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_RespCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_RespCode_IsValid(int value);
constexpr E_RespCode E_RespCode_MIN = OK;
constexpr E_RespCode E_RespCode_MAX = LOGIN_INVALID_PW;
constexpr int E_RespCode_ARRAYSIZE = E_RespCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_RespCode_descriptor();
template<typename T>
inline const std::string& E_RespCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_RespCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_RespCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_RespCode_descriptor(), enum_t_value);
}
inline bool E_RespCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_RespCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_RespCode>(
    E_RespCode_descriptor(), name, value);
}
// ===================================================================

class Login_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.db.Login_Req) */ {
 public:
  inline Login_Req() : Login_Req(nullptr) {}
  ~Login_Req() override;
  explicit PROTOBUF_CONSTEXPR Login_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Login_Req(const Login_Req& from);
  Login_Req(Login_Req&& from) noexcept
    : Login_Req() {
    *this = ::std::move(from);
  }

  inline Login_Req& operator=(const Login_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_Req& operator=(Login_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Login_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Login_Req* internal_default_instance() {
    return reinterpret_cast<const Login_Req*>(
               &_Login_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Login_Req& a, Login_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Login_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Login_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Login_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Login_Req& from) {
    Login_Req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.db.Login_Req";
  }
  protected:
  explicit Login_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kPasswdFieldNumber = 3,
    kSerialFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string passwd = 3;
  void clear_passwd();
  const std::string& passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwd();
  PROTOBUF_NODISCARD std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // int32 serial = 1;
  void clear_serial();
  int32_t serial() const;
  void set_serial(int32_t value);
  private:
  int32_t _internal_serial() const;
  void _internal_set_serial(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.db.Login_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
    int32_t serial_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Login_Resp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.db.Login_Resp) */ {
 public:
  inline Login_Resp() : Login_Resp(nullptr) {}
  ~Login_Resp() override;
  explicit PROTOBUF_CONSTEXPR Login_Resp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Login_Resp(const Login_Resp& from);
  Login_Resp(Login_Resp&& from) noexcept
    : Login_Resp() {
    *this = ::std::move(from);
  }

  inline Login_Resp& operator=(const Login_Resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_Resp& operator=(Login_Resp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Login_Resp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Login_Resp* internal_default_instance() {
    return reinterpret_cast<const Login_Resp*>(
               &_Login_Resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Login_Resp& a, Login_Resp& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_Resp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login_Resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Login_Resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Login_Resp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Login_Resp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Login_Resp& from) {
    Login_Resp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_Resp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.db.Login_Resp";
  }
  protected:
  explicit Login_Resp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 3,
    kSerialFieldNumber = 1,
    kRespFieldNumber = 2,
  };
  // string nickname = 3;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int32 serial = 1;
  void clear_serial();
  int32_t serial() const;
  void set_serial(int32_t value);
  private:
  int32_t _internal_serial() const;
  void _internal_set_serial(int32_t value);
  public:

  // .protocol.db.E_RespCode resp = 2;
  void clear_resp();
  ::protocol::db::E_RespCode resp() const;
  void set_resp(::protocol::db::E_RespCode value);
  private:
  ::protocol::db::E_RespCode _internal_resp() const;
  void _internal_set_resp(::protocol::db::E_RespCode value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.db.Login_Resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    int32_t serial_;
    int resp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Login_Req

// int32 serial = 1;
inline void Login_Req::clear_serial() {
  _impl_.serial_ = 0;
}
inline int32_t Login_Req::_internal_serial() const {
  return _impl_.serial_;
}
inline int32_t Login_Req::serial() const {
  // @@protoc_insertion_point(field_get:protocol.db.Login_Req.serial)
  return _internal_serial();
}
inline void Login_Req::_internal_set_serial(int32_t value) {
  
  _impl_.serial_ = value;
}
inline void Login_Req::set_serial(int32_t value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:protocol.db.Login_Req.serial)
}

// string id = 2;
inline void Login_Req::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Login_Req::id() const {
  // @@protoc_insertion_point(field_get:protocol.db.Login_Req.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login_Req::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.db.Login_Req.id)
}
inline std::string* Login_Req::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:protocol.db.Login_Req.id)
  return _s;
}
inline const std::string& Login_Req::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Login_Req::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Login_Req::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Login_Req::release_id() {
  // @@protoc_insertion_point(field_release:protocol.db.Login_Req.id)
  return _impl_.id_.Release();
}
inline void Login_Req::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.db.Login_Req.id)
}

// string passwd = 3;
inline void Login_Req::clear_passwd() {
  _impl_.passwd_.ClearToEmpty();
}
inline const std::string& Login_Req::passwd() const {
  // @@protoc_insertion_point(field_get:protocol.db.Login_Req.passwd)
  return _internal_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login_Req::set_passwd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.passwd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.db.Login_Req.passwd)
}
inline std::string* Login_Req::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:protocol.db.Login_Req.passwd)
  return _s;
}
inline const std::string& Login_Req::_internal_passwd() const {
  return _impl_.passwd_.Get();
}
inline void Login_Req::_internal_set_passwd(const std::string& value) {
  
  _impl_.passwd_.Set(value, GetArenaForAllocation());
}
inline std::string* Login_Req::_internal_mutable_passwd() {
  
  return _impl_.passwd_.Mutable(GetArenaForAllocation());
}
inline std::string* Login_Req::release_passwd() {
  // @@protoc_insertion_point(field_release:protocol.db.Login_Req.passwd)
  return _impl_.passwd_.Release();
}
inline void Login_Req::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  _impl_.passwd_.SetAllocated(passwd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.passwd_.IsDefault()) {
    _impl_.passwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.db.Login_Req.passwd)
}

// -------------------------------------------------------------------

// Login_Resp

// int32 serial = 1;
inline void Login_Resp::clear_serial() {
  _impl_.serial_ = 0;
}
inline int32_t Login_Resp::_internal_serial() const {
  return _impl_.serial_;
}
inline int32_t Login_Resp::serial() const {
  // @@protoc_insertion_point(field_get:protocol.db.Login_Resp.serial)
  return _internal_serial();
}
inline void Login_Resp::_internal_set_serial(int32_t value) {
  
  _impl_.serial_ = value;
}
inline void Login_Resp::set_serial(int32_t value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:protocol.db.Login_Resp.serial)
}

// .protocol.db.E_RespCode resp = 2;
inline void Login_Resp::clear_resp() {
  _impl_.resp_ = 0;
}
inline ::protocol::db::E_RespCode Login_Resp::_internal_resp() const {
  return static_cast< ::protocol::db::E_RespCode >(_impl_.resp_);
}
inline ::protocol::db::E_RespCode Login_Resp::resp() const {
  // @@protoc_insertion_point(field_get:protocol.db.Login_Resp.resp)
  return _internal_resp();
}
inline void Login_Resp::_internal_set_resp(::protocol::db::E_RespCode value) {
  
  _impl_.resp_ = value;
}
inline void Login_Resp::set_resp(::protocol::db::E_RespCode value) {
  _internal_set_resp(value);
  // @@protoc_insertion_point(field_set:protocol.db.Login_Resp.resp)
}

// string nickname = 3;
inline void Login_Resp::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& Login_Resp::nickname() const {
  // @@protoc_insertion_point(field_get:protocol.db.Login_Resp.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login_Resp::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.db.Login_Resp.nickname)
}
inline std::string* Login_Resp::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:protocol.db.Login_Resp.nickname)
  return _s;
}
inline const std::string& Login_Resp::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void Login_Resp::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* Login_Resp::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* Login_Resp::release_nickname() {
  // @@protoc_insertion_point(field_release:protocol.db.Login_Resp.nickname)
  return _impl_.nickname_.Release();
}
inline void Login_Resp::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.db.Login_Resp.nickname)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db
}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::db::E_PacketID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::db::E_PacketID>() {
  return ::protocol::db::E_PacketID_descriptor();
}
template <> struct is_proto_enum< ::protocol::db::E_RespCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::db::E_RespCode>() {
  return ::protocol::db::E_RespCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_db_5fprotocol_2eproto
