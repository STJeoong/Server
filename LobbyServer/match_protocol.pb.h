// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: match_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_match_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_match_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_match_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_match_5fprotocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_match_5fprotocol_2eproto;
namespace protocol {
namespace match {
class MatchCancle_Req;
struct MatchCancle_ReqDefaultTypeInternal;
extern MatchCancle_ReqDefaultTypeInternal _MatchCancle_Req_default_instance_;
class Match_Req;
struct Match_ReqDefaultTypeInternal;
extern Match_ReqDefaultTypeInternal _Match_Req_default_instance_;
class Match_Resp;
struct Match_RespDefaultTypeInternal;
extern Match_RespDefaultTypeInternal _Match_Resp_default_instance_;
}  // namespace match
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::match::MatchCancle_Req* Arena::CreateMaybeMessage<::protocol::match::MatchCancle_Req>(Arena*);
template<> ::protocol::match::Match_Req* Arena::CreateMaybeMessage<::protocol::match::Match_Req>(Arena*);
template<> ::protocol::match::Match_Resp* Arena::CreateMaybeMessage<::protocol::match::Match_Resp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace match {

enum E_PacketID : int {
  MATCH_REQ = 0,
  MATCH_CANCLE_REQ = 1,
  MATCH_RESP = 2,
  E_PacketID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_PacketID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_PacketID_IsValid(int value);
constexpr E_PacketID E_PacketID_MIN = MATCH_REQ;
constexpr E_PacketID E_PacketID_MAX = MATCH_RESP;
constexpr int E_PacketID_ARRAYSIZE = E_PacketID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_PacketID_descriptor();
template<typename T>
inline const std::string& E_PacketID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_PacketID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_PacketID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_PacketID_descriptor(), enum_t_value);
}
inline bool E_PacketID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_PacketID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_PacketID>(
    E_PacketID_descriptor(), name, value);
}
// ===================================================================

class Match_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.match.Match_Req) */ {
 public:
  inline Match_Req() : Match_Req(nullptr) {}
  ~Match_Req() override;
  explicit PROTOBUF_CONSTEXPR Match_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Match_Req(const Match_Req& from);
  Match_Req(Match_Req&& from) noexcept
    : Match_Req() {
    *this = ::std::move(from);
  }

  inline Match_Req& operator=(const Match_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Match_Req& operator=(Match_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Match_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Match_Req* internal_default_instance() {
    return reinterpret_cast<const Match_Req*>(
               &_Match_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Match_Req& a, Match_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(Match_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Match_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Match_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Match_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Match_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Match_Req& from) {
    Match_Req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Match_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.match.Match_Req";
  }
  protected:
  explicit Match_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialFieldNumber = 1,
  };
  // int32 serial = 1;
  void clear_serial();
  int32_t serial() const;
  void set_serial(int32_t value);
  private:
  int32_t _internal_serial() const;
  void _internal_set_serial(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.match.Match_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t serial_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class MatchCancle_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.match.MatchCancle_Req) */ {
 public:
  inline MatchCancle_Req() : MatchCancle_Req(nullptr) {}
  ~MatchCancle_Req() override;
  explicit PROTOBUF_CONSTEXPR MatchCancle_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchCancle_Req(const MatchCancle_Req& from);
  MatchCancle_Req(MatchCancle_Req&& from) noexcept
    : MatchCancle_Req() {
    *this = ::std::move(from);
  }

  inline MatchCancle_Req& operator=(const MatchCancle_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchCancle_Req& operator=(MatchCancle_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchCancle_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchCancle_Req* internal_default_instance() {
    return reinterpret_cast<const MatchCancle_Req*>(
               &_MatchCancle_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MatchCancle_Req& a, MatchCancle_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchCancle_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchCancle_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchCancle_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchCancle_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchCancle_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MatchCancle_Req& from) {
    MatchCancle_Req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchCancle_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.match.MatchCancle_Req";
  }
  protected:
  explicit MatchCancle_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialFieldNumber = 1,
  };
  // int32 serial = 1;
  void clear_serial();
  int32_t serial() const;
  void set_serial(int32_t value);
  private:
  int32_t _internal_serial() const;
  void _internal_set_serial(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.match.MatchCancle_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t serial_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Match_Resp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.match.Match_Resp) */ {
 public:
  inline Match_Resp() : Match_Resp(nullptr) {}
  ~Match_Resp() override;
  explicit PROTOBUF_CONSTEXPR Match_Resp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Match_Resp(const Match_Resp& from);
  Match_Resp(Match_Resp&& from) noexcept
    : Match_Resp() {
    *this = ::std::move(from);
  }

  inline Match_Resp& operator=(const Match_Resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Match_Resp& operator=(Match_Resp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Match_Resp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Match_Resp* internal_default_instance() {
    return reinterpret_cast<const Match_Resp*>(
               &_Match_Resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Match_Resp& a, Match_Resp& b) {
    a.Swap(&b);
  }
  inline void Swap(Match_Resp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Match_Resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Match_Resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Match_Resp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Match_Resp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Match_Resp& from) {
    Match_Resp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Match_Resp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.match.Match_Resp";
  }
  protected:
  explicit Match_Resp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialsFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // repeated int32 serials = 1;
  int serials_size() const;
  private:
  int _internal_serials_size() const;
  public:
  void clear_serials();
  private:
  int32_t _internal_serials(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_serials() const;
  void _internal_add_serials(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_serials();
  public:
  int32_t serials(int index) const;
  void set_serials(int index, int32_t value);
  void add_serials(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      serials() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_serials();

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 port = 3;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.match.Match_Resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > serials_;
    mutable std::atomic<int> _serials_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Match_Req

// int32 serial = 1;
inline void Match_Req::clear_serial() {
  _impl_.serial_ = 0;
}
inline int32_t Match_Req::_internal_serial() const {
  return _impl_.serial_;
}
inline int32_t Match_Req::serial() const {
  // @@protoc_insertion_point(field_get:protocol.match.Match_Req.serial)
  return _internal_serial();
}
inline void Match_Req::_internal_set_serial(int32_t value) {
  
  _impl_.serial_ = value;
}
inline void Match_Req::set_serial(int32_t value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:protocol.match.Match_Req.serial)
}

// -------------------------------------------------------------------

// MatchCancle_Req

// int32 serial = 1;
inline void MatchCancle_Req::clear_serial() {
  _impl_.serial_ = 0;
}
inline int32_t MatchCancle_Req::_internal_serial() const {
  return _impl_.serial_;
}
inline int32_t MatchCancle_Req::serial() const {
  // @@protoc_insertion_point(field_get:protocol.match.MatchCancle_Req.serial)
  return _internal_serial();
}
inline void MatchCancle_Req::_internal_set_serial(int32_t value) {
  
  _impl_.serial_ = value;
}
inline void MatchCancle_Req::set_serial(int32_t value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:protocol.match.MatchCancle_Req.serial)
}

// -------------------------------------------------------------------

// Match_Resp

// repeated int32 serials = 1;
inline int Match_Resp::_internal_serials_size() const {
  return _impl_.serials_.size();
}
inline int Match_Resp::serials_size() const {
  return _internal_serials_size();
}
inline void Match_Resp::clear_serials() {
  _impl_.serials_.Clear();
}
inline int32_t Match_Resp::_internal_serials(int index) const {
  return _impl_.serials_.Get(index);
}
inline int32_t Match_Resp::serials(int index) const {
  // @@protoc_insertion_point(field_get:protocol.match.Match_Resp.serials)
  return _internal_serials(index);
}
inline void Match_Resp::set_serials(int index, int32_t value) {
  _impl_.serials_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.match.Match_Resp.serials)
}
inline void Match_Resp::_internal_add_serials(int32_t value) {
  _impl_.serials_.Add(value);
}
inline void Match_Resp::add_serials(int32_t value) {
  _internal_add_serials(value);
  // @@protoc_insertion_point(field_add:protocol.match.Match_Resp.serials)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Match_Resp::_internal_serials() const {
  return _impl_.serials_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Match_Resp::serials() const {
  // @@protoc_insertion_point(field_list:protocol.match.Match_Resp.serials)
  return _internal_serials();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Match_Resp::_internal_mutable_serials() {
  return &_impl_.serials_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Match_Resp::mutable_serials() {
  // @@protoc_insertion_point(field_mutable_list:protocol.match.Match_Resp.serials)
  return _internal_mutable_serials();
}

// string ip = 2;
inline void Match_Resp::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& Match_Resp::ip() const {
  // @@protoc_insertion_point(field_get:protocol.match.Match_Resp.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Match_Resp::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.match.Match_Resp.ip)
}
inline std::string* Match_Resp::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:protocol.match.Match_Resp.ip)
  return _s;
}
inline const std::string& Match_Resp::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void Match_Resp::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* Match_Resp::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* Match_Resp::release_ip() {
  // @@protoc_insertion_point(field_release:protocol.match.Match_Resp.ip)
  return _impl_.ip_.Release();
}
inline void Match_Resp::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.match.Match_Resp.ip)
}

// int32 port = 3;
inline void Match_Resp::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t Match_Resp::_internal_port() const {
  return _impl_.port_;
}
inline int32_t Match_Resp::port() const {
  // @@protoc_insertion_point(field_get:protocol.match.Match_Resp.port)
  return _internal_port();
}
inline void Match_Resp::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void Match_Resp::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:protocol.match.Match_Resp.port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace match
}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::match::E_PacketID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::match::E_PacketID>() {
  return ::protocol::match::E_PacketID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_match_5fprotocol_2eproto
