// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: match_protocol.proto

#include "match_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protocol {
namespace match {
PROTOBUF_CONSTEXPR Match_Req::Match_Req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serial_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Match_ReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Match_ReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Match_ReqDefaultTypeInternal() {}
  union {
    Match_Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Match_ReqDefaultTypeInternal _Match_Req_default_instance_;
PROTOBUF_CONSTEXPR MatchCancle_Req::MatchCancle_Req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serial_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatchCancle_ReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchCancle_ReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchCancle_ReqDefaultTypeInternal() {}
  union {
    MatchCancle_Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchCancle_ReqDefaultTypeInternal _MatchCancle_Req_default_instance_;
PROTOBUF_CONSTEXPR Match_Resp::Match_Resp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serials_)*/{}
  , /*decltype(_impl_._serials_cached_byte_size_)*/{0}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Match_RespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Match_RespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Match_RespDefaultTypeInternal() {}
  union {
    Match_Resp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Match_RespDefaultTypeInternal _Match_Resp_default_instance_;
}  // namespace match
}  // namespace protocol
static ::_pb::Metadata file_level_metadata_match_5fprotocol_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_match_5fprotocol_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_match_5fprotocol_2eproto = nullptr;

const uint32_t TableStruct_match_5fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::match::Match_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::match::Match_Req, _impl_.serial_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::match::MatchCancle_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::match::MatchCancle_Req, _impl_.serial_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::match::Match_Resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::match::Match_Resp, _impl_.serials_),
  PROTOBUF_FIELD_OFFSET(::protocol::match::Match_Resp, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::protocol::match::Match_Resp, _impl_.port_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protocol::match::Match_Req)},
  { 7, -1, -1, sizeof(::protocol::match::MatchCancle_Req)},
  { 14, -1, -1, sizeof(::protocol::match::Match_Resp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protocol::match::_Match_Req_default_instance_._instance,
  &::protocol::match::_MatchCancle_Req_default_instance_._instance,
  &::protocol::match::_Match_Resp_default_instance_._instance,
};

const char descriptor_table_protodef_match_5fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024match_protocol.proto\022\016protocol.match\"\033"
  "\n\tMatch_Req\022\016\n\006serial\030\001 \001(\005\"!\n\017MatchCanc"
  "le_Req\022\016\n\006serial\030\001 \001(\005\"7\n\nMatch_Resp\022\017\n\007"
  "serials\030\001 \003(\005\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\005*"
  "A\n\nE_PacketID\022\r\n\tMATCH_REQ\020\000\022\024\n\020MATCH_CA"
  "NCLE_REQ\020\001\022\016\n\nMATCH_RESP\020\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_match_5fprotocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_match_5fprotocol_2eproto = {
    false, false, 234, descriptor_table_protodef_match_5fprotocol_2eproto,
    "match_protocol.proto",
    &descriptor_table_match_5fprotocol_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_match_5fprotocol_2eproto::offsets,
    file_level_metadata_match_5fprotocol_2eproto, file_level_enum_descriptors_match_5fprotocol_2eproto,
    file_level_service_descriptors_match_5fprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_match_5fprotocol_2eproto_getter() {
  return &descriptor_table_match_5fprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_match_5fprotocol_2eproto(&descriptor_table_match_5fprotocol_2eproto);
namespace protocol {
namespace match {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_PacketID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_match_5fprotocol_2eproto);
  return file_level_enum_descriptors_match_5fprotocol_2eproto[0];
}
bool E_PacketID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Match_Req::_Internal {
 public:
};

Match_Req::Match_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocol.match.Match_Req)
}
Match_Req::Match_Req(const Match_Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Match_Req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serial_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.serial_ = from._impl_.serial_;
  // @@protoc_insertion_point(copy_constructor:protocol.match.Match_Req)
}

inline void Match_Req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serial_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Match_Req::~Match_Req() {
  // @@protoc_insertion_point(destructor:protocol.match.Match_Req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Match_Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Match_Req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Match_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.match.Match_Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serial_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Match_Req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Match_Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.match.Match_Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serial = 1;
  if (this->_internal_serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_serial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.match.Match_Req)
  return target;
}

size_t Match_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.match.Match_Req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 serial = 1;
  if (this->_internal_serial() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serial());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Match_Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Match_Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Match_Req::GetClassData() const { return &_class_data_; }


void Match_Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Match_Req*>(&to_msg);
  auto& from = static_cast<const Match_Req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocol.match.Match_Req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_serial() != 0) {
    _this->_internal_set_serial(from._internal_serial());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Match_Req::CopyFrom(const Match_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.match.Match_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_Req::IsInitialized() const {
  return true;
}

void Match_Req::InternalSwap(Match_Req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.serial_, other->_impl_.serial_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Match_Req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_5fprotocol_2eproto_getter, &descriptor_table_match_5fprotocol_2eproto_once,
      file_level_metadata_match_5fprotocol_2eproto[0]);
}

// ===================================================================

class MatchCancle_Req::_Internal {
 public:
};

MatchCancle_Req::MatchCancle_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocol.match.MatchCancle_Req)
}
MatchCancle_Req::MatchCancle_Req(const MatchCancle_Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchCancle_Req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serial_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.serial_ = from._impl_.serial_;
  // @@protoc_insertion_point(copy_constructor:protocol.match.MatchCancle_Req)
}

inline void MatchCancle_Req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serial_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MatchCancle_Req::~MatchCancle_Req() {
  // @@protoc_insertion_point(destructor:protocol.match.MatchCancle_Req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchCancle_Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MatchCancle_Req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchCancle_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.match.MatchCancle_Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serial_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchCancle_Req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchCancle_Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.match.MatchCancle_Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serial = 1;
  if (this->_internal_serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_serial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.match.MatchCancle_Req)
  return target;
}

size_t MatchCancle_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.match.MatchCancle_Req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 serial = 1;
  if (this->_internal_serial() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serial());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchCancle_Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchCancle_Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchCancle_Req::GetClassData() const { return &_class_data_; }


void MatchCancle_Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchCancle_Req*>(&to_msg);
  auto& from = static_cast<const MatchCancle_Req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocol.match.MatchCancle_Req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_serial() != 0) {
    _this->_internal_set_serial(from._internal_serial());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchCancle_Req::CopyFrom(const MatchCancle_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.match.MatchCancle_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchCancle_Req::IsInitialized() const {
  return true;
}

void MatchCancle_Req::InternalSwap(MatchCancle_Req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.serial_, other->_impl_.serial_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchCancle_Req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_5fprotocol_2eproto_getter, &descriptor_table_match_5fprotocol_2eproto_once,
      file_level_metadata_match_5fprotocol_2eproto[1]);
}

// ===================================================================

class Match_Resp::_Internal {
 public:
};

Match_Resp::Match_Resp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocol.match.Match_Resp)
}
Match_Resp::Match_Resp(const Match_Resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Match_Resp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serials_){from._impl_.serials_}
    , /*decltype(_impl_._serials_cached_byte_size_)*/{0}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:protocol.match.Match_Resp)
}

inline void Match_Resp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serials_){arena}
    , /*decltype(_impl_._serials_cached_byte_size_)*/{0}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Match_Resp::~Match_Resp() {
  // @@protoc_insertion_point(destructor:protocol.match.Match_Resp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Match_Resp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serials_.~RepeatedField();
  _impl_.ip_.Destroy();
}

void Match_Resp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Match_Resp::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.match.Match_Resp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serials_.Clear();
  _impl_.ip_.ClearToEmpty();
  _impl_.port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Match_Resp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 serials = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_serials(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_serials(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protocol.match.Match_Resp.ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Match_Resp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.match.Match_Resp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 serials = 1;
  {
    int byte_size = _impl_._serials_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_serials(), byte_size, target);
    }
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.match.Match_Resp.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.match.Match_Resp)
  return target;
}

size_t Match_Resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.match.Match_Resp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 serials = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.serials_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._serials_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Match_Resp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Match_Resp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Match_Resp::GetClassData() const { return &_class_data_; }


void Match_Resp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Match_Resp*>(&to_msg);
  auto& from = static_cast<const Match_Resp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocol.match.Match_Resp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.serials_.MergeFrom(from._impl_.serials_);
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Match_Resp::CopyFrom(const Match_Resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.match.Match_Resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match_Resp::IsInitialized() const {
  return true;
}

void Match_Resp::InternalSwap(Match_Resp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.serials_.InternalSwap(&other->_impl_.serials_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Match_Resp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_5fprotocol_2eproto_getter, &descriptor_table_match_5fprotocol_2eproto_once,
      file_level_metadata_match_5fprotocol_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace match
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::match::Match_Req*
Arena::CreateMaybeMessage< ::protocol::match::Match_Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::match::Match_Req >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::match::MatchCancle_Req*
Arena::CreateMaybeMessage< ::protocol::match::MatchCancle_Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::match::MatchCancle_Req >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::match::Match_Resp*
Arena::CreateMaybeMessage< ::protocol::match::Match_Resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::match::Match_Resp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
