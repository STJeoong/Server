// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MMO_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MMO_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MMO_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "MMO_enum.pb.h"
#include "MMO_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MMO_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MMO_5fprotocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MMO_5fprotocol_2eproto;
namespace protocol {
namespace mmo {
class EnterGame_Resp;
struct EnterGame_RespDefaultTypeInternal;
extern EnterGame_RespDefaultTypeInternal _EnterGame_Resp_default_instance_;
class Move_Notify;
struct Move_NotifyDefaultTypeInternal;
extern Move_NotifyDefaultTypeInternal _Move_Notify_default_instance_;
class Move_Req;
struct Move_ReqDefaultTypeInternal;
extern Move_ReqDefaultTypeInternal _Move_Req_default_instance_;
class ObjectEnter_Notify;
struct ObjectEnter_NotifyDefaultTypeInternal;
extern ObjectEnter_NotifyDefaultTypeInternal _ObjectEnter_Notify_default_instance_;
class ObjectExit_Notify;
struct ObjectExit_NotifyDefaultTypeInternal;
extern ObjectExit_NotifyDefaultTypeInternal _ObjectExit_Notify_default_instance_;
}  // namespace mmo
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::mmo::EnterGame_Resp* Arena::CreateMaybeMessage<::protocol::mmo::EnterGame_Resp>(Arena*);
template<> ::protocol::mmo::Move_Notify* Arena::CreateMaybeMessage<::protocol::mmo::Move_Notify>(Arena*);
template<> ::protocol::mmo::Move_Req* Arena::CreateMaybeMessage<::protocol::mmo::Move_Req>(Arena*);
template<> ::protocol::mmo::ObjectEnter_Notify* Arena::CreateMaybeMessage<::protocol::mmo::ObjectEnter_Notify>(Arena*);
template<> ::protocol::mmo::ObjectExit_Notify* Arena::CreateMaybeMessage<::protocol::mmo::ObjectExit_Notify>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace mmo {

// ===================================================================

class EnterGame_Resp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.mmo.EnterGame_Resp) */ {
 public:
  inline EnterGame_Resp() : EnterGame_Resp(nullptr) {}
  ~EnterGame_Resp() override;
  explicit PROTOBUF_CONSTEXPR EnterGame_Resp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterGame_Resp(const EnterGame_Resp& from);
  EnterGame_Resp(EnterGame_Resp&& from) noexcept
    : EnterGame_Resp() {
    *this = ::std::move(from);
  }

  inline EnterGame_Resp& operator=(const EnterGame_Resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterGame_Resp& operator=(EnterGame_Resp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterGame_Resp& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterGame_Resp* internal_default_instance() {
    return reinterpret_cast<const EnterGame_Resp*>(
               &_EnterGame_Resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EnterGame_Resp& a, EnterGame_Resp& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterGame_Resp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterGame_Resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnterGame_Resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnterGame_Resp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnterGame_Resp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnterGame_Resp& from) {
    EnterGame_Resp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterGame_Resp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.mmo.EnterGame_Resp";
  }
  protected:
  explicit EnterGame_Resp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyInfoFieldNumber = 2,
    kRespFieldNumber = 1,
  };
  // .protocol.mmo.ObjectInfo myInfo = 2;
  bool has_myinfo() const;
  private:
  bool _internal_has_myinfo() const;
  public:
  void clear_myinfo();
  const ::protocol::mmo::ObjectInfo& myinfo() const;
  PROTOBUF_NODISCARD ::protocol::mmo::ObjectInfo* release_myinfo();
  ::protocol::mmo::ObjectInfo* mutable_myinfo();
  void set_allocated_myinfo(::protocol::mmo::ObjectInfo* myinfo);
  private:
  const ::protocol::mmo::ObjectInfo& _internal_myinfo() const;
  ::protocol::mmo::ObjectInfo* _internal_mutable_myinfo();
  public:
  void unsafe_arena_set_allocated_myinfo(
      ::protocol::mmo::ObjectInfo* myinfo);
  ::protocol::mmo::ObjectInfo* unsafe_arena_release_myinfo();

  // .protocol.mmo.E_RespCode resp = 1;
  void clear_resp();
  ::protocol::mmo::E_RespCode resp() const;
  void set_resp(::protocol::mmo::E_RespCode value);
  private:
  ::protocol::mmo::E_RespCode _internal_resp() const;
  void _internal_set_resp(::protocol::mmo::E_RespCode value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.mmo.EnterGame_Resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::mmo::ObjectInfo* myinfo_;
    int resp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MMO_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ObjectEnter_Notify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.mmo.ObjectEnter_Notify) */ {
 public:
  inline ObjectEnter_Notify() : ObjectEnter_Notify(nullptr) {}
  ~ObjectEnter_Notify() override;
  explicit PROTOBUF_CONSTEXPR ObjectEnter_Notify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectEnter_Notify(const ObjectEnter_Notify& from);
  ObjectEnter_Notify(ObjectEnter_Notify&& from) noexcept
    : ObjectEnter_Notify() {
    *this = ::std::move(from);
  }

  inline ObjectEnter_Notify& operator=(const ObjectEnter_Notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectEnter_Notify& operator=(ObjectEnter_Notify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectEnter_Notify& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectEnter_Notify* internal_default_instance() {
    return reinterpret_cast<const ObjectEnter_Notify*>(
               &_ObjectEnter_Notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjectEnter_Notify& a, ObjectEnter_Notify& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectEnter_Notify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectEnter_Notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectEnter_Notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectEnter_Notify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectEnter_Notify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectEnter_Notify& from) {
    ObjectEnter_Notify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectEnter_Notify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.mmo.ObjectEnter_Notify";
  }
  protected:
  explicit ObjectEnter_Notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherInfoFieldNumber = 1,
  };
  // .protocol.mmo.ObjectInfo otherInfo = 1;
  bool has_otherinfo() const;
  private:
  bool _internal_has_otherinfo() const;
  public:
  void clear_otherinfo();
  const ::protocol::mmo::ObjectInfo& otherinfo() const;
  PROTOBUF_NODISCARD ::protocol::mmo::ObjectInfo* release_otherinfo();
  ::protocol::mmo::ObjectInfo* mutable_otherinfo();
  void set_allocated_otherinfo(::protocol::mmo::ObjectInfo* otherinfo);
  private:
  const ::protocol::mmo::ObjectInfo& _internal_otherinfo() const;
  ::protocol::mmo::ObjectInfo* _internal_mutable_otherinfo();
  public:
  void unsafe_arena_set_allocated_otherinfo(
      ::protocol::mmo::ObjectInfo* otherinfo);
  ::protocol::mmo::ObjectInfo* unsafe_arena_release_otherinfo();

  // @@protoc_insertion_point(class_scope:protocol.mmo.ObjectEnter_Notify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::mmo::ObjectInfo* otherinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MMO_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ObjectExit_Notify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.mmo.ObjectExit_Notify) */ {
 public:
  inline ObjectExit_Notify() : ObjectExit_Notify(nullptr) {}
  ~ObjectExit_Notify() override;
  explicit PROTOBUF_CONSTEXPR ObjectExit_Notify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectExit_Notify(const ObjectExit_Notify& from);
  ObjectExit_Notify(ObjectExit_Notify&& from) noexcept
    : ObjectExit_Notify() {
    *this = ::std::move(from);
  }

  inline ObjectExit_Notify& operator=(const ObjectExit_Notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectExit_Notify& operator=(ObjectExit_Notify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectExit_Notify& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectExit_Notify* internal_default_instance() {
    return reinterpret_cast<const ObjectExit_Notify*>(
               &_ObjectExit_Notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ObjectExit_Notify& a, ObjectExit_Notify& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectExit_Notify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectExit_Notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectExit_Notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectExit_Notify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectExit_Notify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectExit_Notify& from) {
    ObjectExit_Notify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectExit_Notify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.mmo.ObjectExit_Notify";
  }
  protected:
  explicit ObjectExit_Notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherIdFieldNumber = 1,
  };
  // int32 otherId = 1;
  void clear_otherid();
  int32_t otherid() const;
  void set_otherid(int32_t value);
  private:
  int32_t _internal_otherid() const;
  void _internal_set_otherid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.mmo.ObjectExit_Notify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t otherid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MMO_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Move_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.mmo.Move_Req) */ {
 public:
  inline Move_Req() : Move_Req(nullptr) {}
  ~Move_Req() override;
  explicit PROTOBUF_CONSTEXPR Move_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Move_Req(const Move_Req& from);
  Move_Req(Move_Req&& from) noexcept
    : Move_Req() {
    *this = ::std::move(from);
  }

  inline Move_Req& operator=(const Move_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Move_Req& operator=(Move_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Move_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Move_Req* internal_default_instance() {
    return reinterpret_cast<const Move_Req*>(
               &_Move_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Move_Req& a, Move_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(Move_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Move_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Move_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Move_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Move_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Move_Req& from) {
    Move_Req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Move_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.mmo.Move_Req";
  }
  protected:
  explicit Move_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 1,
  };
  // .protocol.mmo.E_Dir dir = 1;
  void clear_dir();
  ::protocol::mmo::E_Dir dir() const;
  void set_dir(::protocol::mmo::E_Dir value);
  private:
  ::protocol::mmo::E_Dir _internal_dir() const;
  void _internal_set_dir(::protocol::mmo::E_Dir value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.mmo.Move_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MMO_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Move_Notify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.mmo.Move_Notify) */ {
 public:
  inline Move_Notify() : Move_Notify(nullptr) {}
  ~Move_Notify() override;
  explicit PROTOBUF_CONSTEXPR Move_Notify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Move_Notify(const Move_Notify& from);
  Move_Notify(Move_Notify&& from) noexcept
    : Move_Notify() {
    *this = ::std::move(from);
  }

  inline Move_Notify& operator=(const Move_Notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline Move_Notify& operator=(Move_Notify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Move_Notify& default_instance() {
    return *internal_default_instance();
  }
  static inline const Move_Notify* internal_default_instance() {
    return reinterpret_cast<const Move_Notify*>(
               &_Move_Notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Move_Notify& a, Move_Notify& b) {
    a.Swap(&b);
  }
  inline void Swap(Move_Notify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Move_Notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Move_Notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Move_Notify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Move_Notify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Move_Notify& from) {
    Move_Notify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Move_Notify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.mmo.Move_Notify";
  }
  protected:
  explicit Move_Notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDirFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .protocol.mmo.E_Dir dir = 2;
  void clear_dir();
  ::protocol::mmo::E_Dir dir() const;
  void set_dir(::protocol::mmo::E_Dir value);
  private:
  ::protocol::mmo::E_Dir _internal_dir() const;
  void _internal_set_dir(::protocol::mmo::E_Dir value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.mmo.Move_Notify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MMO_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnterGame_Resp

// .protocol.mmo.E_RespCode resp = 1;
inline void EnterGame_Resp::clear_resp() {
  _impl_.resp_ = 0;
}
inline ::protocol::mmo::E_RespCode EnterGame_Resp::_internal_resp() const {
  return static_cast< ::protocol::mmo::E_RespCode >(_impl_.resp_);
}
inline ::protocol::mmo::E_RespCode EnterGame_Resp::resp() const {
  // @@protoc_insertion_point(field_get:protocol.mmo.EnterGame_Resp.resp)
  return _internal_resp();
}
inline void EnterGame_Resp::_internal_set_resp(::protocol::mmo::E_RespCode value) {
  
  _impl_.resp_ = value;
}
inline void EnterGame_Resp::set_resp(::protocol::mmo::E_RespCode value) {
  _internal_set_resp(value);
  // @@protoc_insertion_point(field_set:protocol.mmo.EnterGame_Resp.resp)
}

// .protocol.mmo.ObjectInfo myInfo = 2;
inline bool EnterGame_Resp::_internal_has_myinfo() const {
  return this != internal_default_instance() && _impl_.myinfo_ != nullptr;
}
inline bool EnterGame_Resp::has_myinfo() const {
  return _internal_has_myinfo();
}
inline const ::protocol::mmo::ObjectInfo& EnterGame_Resp::_internal_myinfo() const {
  const ::protocol::mmo::ObjectInfo* p = _impl_.myinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::mmo::ObjectInfo&>(
      ::protocol::mmo::_ObjectInfo_default_instance_);
}
inline const ::protocol::mmo::ObjectInfo& EnterGame_Resp::myinfo() const {
  // @@protoc_insertion_point(field_get:protocol.mmo.EnterGame_Resp.myInfo)
  return _internal_myinfo();
}
inline void EnterGame_Resp::unsafe_arena_set_allocated_myinfo(
    ::protocol::mmo::ObjectInfo* myinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.myinfo_);
  }
  _impl_.myinfo_ = myinfo;
  if (myinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.mmo.EnterGame_Resp.myInfo)
}
inline ::protocol::mmo::ObjectInfo* EnterGame_Resp::release_myinfo() {
  
  ::protocol::mmo::ObjectInfo* temp = _impl_.myinfo_;
  _impl_.myinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::mmo::ObjectInfo* EnterGame_Resp::unsafe_arena_release_myinfo() {
  // @@protoc_insertion_point(field_release:protocol.mmo.EnterGame_Resp.myInfo)
  
  ::protocol::mmo::ObjectInfo* temp = _impl_.myinfo_;
  _impl_.myinfo_ = nullptr;
  return temp;
}
inline ::protocol::mmo::ObjectInfo* EnterGame_Resp::_internal_mutable_myinfo() {
  
  if (_impl_.myinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::mmo::ObjectInfo>(GetArenaForAllocation());
    _impl_.myinfo_ = p;
  }
  return _impl_.myinfo_;
}
inline ::protocol::mmo::ObjectInfo* EnterGame_Resp::mutable_myinfo() {
  ::protocol::mmo::ObjectInfo* _msg = _internal_mutable_myinfo();
  // @@protoc_insertion_point(field_mutable:protocol.mmo.EnterGame_Resp.myInfo)
  return _msg;
}
inline void EnterGame_Resp::set_allocated_myinfo(::protocol::mmo::ObjectInfo* myinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.myinfo_);
  }
  if (myinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(myinfo));
    if (message_arena != submessage_arena) {
      myinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, myinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.myinfo_ = myinfo;
  // @@protoc_insertion_point(field_set_allocated:protocol.mmo.EnterGame_Resp.myInfo)
}

// -------------------------------------------------------------------

// ObjectEnter_Notify

// .protocol.mmo.ObjectInfo otherInfo = 1;
inline bool ObjectEnter_Notify::_internal_has_otherinfo() const {
  return this != internal_default_instance() && _impl_.otherinfo_ != nullptr;
}
inline bool ObjectEnter_Notify::has_otherinfo() const {
  return _internal_has_otherinfo();
}
inline const ::protocol::mmo::ObjectInfo& ObjectEnter_Notify::_internal_otherinfo() const {
  const ::protocol::mmo::ObjectInfo* p = _impl_.otherinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::mmo::ObjectInfo&>(
      ::protocol::mmo::_ObjectInfo_default_instance_);
}
inline const ::protocol::mmo::ObjectInfo& ObjectEnter_Notify::otherinfo() const {
  // @@protoc_insertion_point(field_get:protocol.mmo.ObjectEnter_Notify.otherInfo)
  return _internal_otherinfo();
}
inline void ObjectEnter_Notify::unsafe_arena_set_allocated_otherinfo(
    ::protocol::mmo::ObjectInfo* otherinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.otherinfo_);
  }
  _impl_.otherinfo_ = otherinfo;
  if (otherinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.mmo.ObjectEnter_Notify.otherInfo)
}
inline ::protocol::mmo::ObjectInfo* ObjectEnter_Notify::release_otherinfo() {
  
  ::protocol::mmo::ObjectInfo* temp = _impl_.otherinfo_;
  _impl_.otherinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::mmo::ObjectInfo* ObjectEnter_Notify::unsafe_arena_release_otherinfo() {
  // @@protoc_insertion_point(field_release:protocol.mmo.ObjectEnter_Notify.otherInfo)
  
  ::protocol::mmo::ObjectInfo* temp = _impl_.otherinfo_;
  _impl_.otherinfo_ = nullptr;
  return temp;
}
inline ::protocol::mmo::ObjectInfo* ObjectEnter_Notify::_internal_mutable_otherinfo() {
  
  if (_impl_.otherinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::mmo::ObjectInfo>(GetArenaForAllocation());
    _impl_.otherinfo_ = p;
  }
  return _impl_.otherinfo_;
}
inline ::protocol::mmo::ObjectInfo* ObjectEnter_Notify::mutable_otherinfo() {
  ::protocol::mmo::ObjectInfo* _msg = _internal_mutable_otherinfo();
  // @@protoc_insertion_point(field_mutable:protocol.mmo.ObjectEnter_Notify.otherInfo)
  return _msg;
}
inline void ObjectEnter_Notify::set_allocated_otherinfo(::protocol::mmo::ObjectInfo* otherinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.otherinfo_);
  }
  if (otherinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(otherinfo));
    if (message_arena != submessage_arena) {
      otherinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, otherinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.otherinfo_ = otherinfo;
  // @@protoc_insertion_point(field_set_allocated:protocol.mmo.ObjectEnter_Notify.otherInfo)
}

// -------------------------------------------------------------------

// ObjectExit_Notify

// int32 otherId = 1;
inline void ObjectExit_Notify::clear_otherid() {
  _impl_.otherid_ = 0;
}
inline int32_t ObjectExit_Notify::_internal_otherid() const {
  return _impl_.otherid_;
}
inline int32_t ObjectExit_Notify::otherid() const {
  // @@protoc_insertion_point(field_get:protocol.mmo.ObjectExit_Notify.otherId)
  return _internal_otherid();
}
inline void ObjectExit_Notify::_internal_set_otherid(int32_t value) {
  
  _impl_.otherid_ = value;
}
inline void ObjectExit_Notify::set_otherid(int32_t value) {
  _internal_set_otherid(value);
  // @@protoc_insertion_point(field_set:protocol.mmo.ObjectExit_Notify.otherId)
}

// -------------------------------------------------------------------

// Move_Req

// .protocol.mmo.E_Dir dir = 1;
inline void Move_Req::clear_dir() {
  _impl_.dir_ = 0;
}
inline ::protocol::mmo::E_Dir Move_Req::_internal_dir() const {
  return static_cast< ::protocol::mmo::E_Dir >(_impl_.dir_);
}
inline ::protocol::mmo::E_Dir Move_Req::dir() const {
  // @@protoc_insertion_point(field_get:protocol.mmo.Move_Req.dir)
  return _internal_dir();
}
inline void Move_Req::_internal_set_dir(::protocol::mmo::E_Dir value) {
  
  _impl_.dir_ = value;
}
inline void Move_Req::set_dir(::protocol::mmo::E_Dir value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:protocol.mmo.Move_Req.dir)
}

// -------------------------------------------------------------------

// Move_Notify

// int32 id = 1;
inline void Move_Notify::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Move_Notify::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Move_Notify::id() const {
  // @@protoc_insertion_point(field_get:protocol.mmo.Move_Notify.id)
  return _internal_id();
}
inline void Move_Notify::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Move_Notify::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.mmo.Move_Notify.id)
}

// .protocol.mmo.E_Dir dir = 2;
inline void Move_Notify::clear_dir() {
  _impl_.dir_ = 0;
}
inline ::protocol::mmo::E_Dir Move_Notify::_internal_dir() const {
  return static_cast< ::protocol::mmo::E_Dir >(_impl_.dir_);
}
inline ::protocol::mmo::E_Dir Move_Notify::dir() const {
  // @@protoc_insertion_point(field_get:protocol.mmo.Move_Notify.dir)
  return _internal_dir();
}
inline void Move_Notify::_internal_set_dir(::protocol::mmo::E_Dir value) {
  
  _impl_.dir_ = value;
}
inline void Move_Notify::set_dir(::protocol::mmo::E_Dir value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:protocol.mmo.Move_Notify.dir)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mmo
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MMO_5fprotocol_2eproto
