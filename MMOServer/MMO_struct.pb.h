// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MMO_struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MMO_5fstruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MMO_5fstruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "MMO_enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MMO_5fstruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MMO_5fstruct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MMO_5fstruct_2eproto;
namespace protocol {
namespace mmo {
class ObjectInfo;
struct ObjectInfoDefaultTypeInternal;
extern ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
class TransformInt;
struct TransformIntDefaultTypeInternal;
extern TransformIntDefaultTypeInternal _TransformInt_default_instance_;
}  // namespace mmo
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::mmo::ObjectInfo* Arena::CreateMaybeMessage<::protocol::mmo::ObjectInfo>(Arena*);
template<> ::protocol::mmo::TransformInt* Arena::CreateMaybeMessage<::protocol::mmo::TransformInt>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace mmo {

// ===================================================================

class TransformInt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.mmo.TransformInt) */ {
 public:
  inline TransformInt() : TransformInt(nullptr) {}
  ~TransformInt() override;
  explicit PROTOBUF_CONSTEXPR TransformInt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformInt(const TransformInt& from);
  TransformInt(TransformInt&& from) noexcept
    : TransformInt() {
    *this = ::std::move(from);
  }

  inline TransformInt& operator=(const TransformInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformInt& operator=(TransformInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformInt* internal_default_instance() {
    return reinterpret_cast<const TransformInt*>(
               &_TransformInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransformInt& a, TransformInt& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformInt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformInt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformInt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformInt& from) {
    TransformInt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformInt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.mmo.TransformInt";
  }
  protected:
  explicit TransformInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kDirFieldNumber = 3,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // .protocol.mmo.E_Dir dir = 3;
  void clear_dir();
  ::protocol::mmo::E_Dir dir() const;
  void set_dir(::protocol::mmo::E_Dir value);
  private:
  ::protocol::mmo::E_Dir _internal_dir() const;
  void _internal_set_dir(::protocol::mmo::E_Dir value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.mmo.TransformInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    int dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MMO_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class ObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.mmo.ObjectInfo) */ {
 public:
  inline ObjectInfo() : ObjectInfo(nullptr) {}
  ~ObjectInfo() override;
  explicit PROTOBUF_CONSTEXPR ObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInfo(const ObjectInfo& from);
  ObjectInfo(ObjectInfo&& from) noexcept
    : ObjectInfo() {
    *this = ::std::move(from);
  }

  inline ObjectInfo& operator=(const ObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInfo& operator=(ObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ObjectInfo*>(
               &_ObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjectInfo& a, ObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectInfo& from) {
    ObjectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.mmo.ObjectInfo";
  }
  protected:
  explicit ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 3,
    kIdFieldNumber = 1,
    kStateFieldNumber = 2,
    kFlipXFieldNumber = 4,
  };
  // .protocol.mmo.TransformInt transform = 3;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::protocol::mmo::TransformInt& transform() const;
  PROTOBUF_NODISCARD ::protocol::mmo::TransformInt* release_transform();
  ::protocol::mmo::TransformInt* mutable_transform();
  void set_allocated_transform(::protocol::mmo::TransformInt* transform);
  private:
  const ::protocol::mmo::TransformInt& _internal_transform() const;
  ::protocol::mmo::TransformInt* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::protocol::mmo::TransformInt* transform);
  ::protocol::mmo::TransformInt* unsafe_arena_release_transform();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .protocol.mmo.E_ObjectState state = 2;
  void clear_state();
  ::protocol::mmo::E_ObjectState state() const;
  void set_state(::protocol::mmo::E_ObjectState value);
  private:
  ::protocol::mmo::E_ObjectState _internal_state() const;
  void _internal_set_state(::protocol::mmo::E_ObjectState value);
  public:

  // bool flipX = 4;
  void clear_flipx();
  bool flipx() const;
  void set_flipx(bool value);
  private:
  bool _internal_flipx() const;
  void _internal_set_flipx(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.mmo.ObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::mmo::TransformInt* transform_;
    int32_t id_;
    int state_;
    bool flipx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MMO_5fstruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransformInt

// int32 x = 1;
inline void TransformInt::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t TransformInt::_internal_x() const {
  return _impl_.x_;
}
inline int32_t TransformInt::x() const {
  // @@protoc_insertion_point(field_get:protocol.mmo.TransformInt.x)
  return _internal_x();
}
inline void TransformInt::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void TransformInt::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protocol.mmo.TransformInt.x)
}

// int32 y = 2;
inline void TransformInt::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t TransformInt::_internal_y() const {
  return _impl_.y_;
}
inline int32_t TransformInt::y() const {
  // @@protoc_insertion_point(field_get:protocol.mmo.TransformInt.y)
  return _internal_y();
}
inline void TransformInt::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void TransformInt::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protocol.mmo.TransformInt.y)
}

// .protocol.mmo.E_Dir dir = 3;
inline void TransformInt::clear_dir() {
  _impl_.dir_ = 0;
}
inline ::protocol::mmo::E_Dir TransformInt::_internal_dir() const {
  return static_cast< ::protocol::mmo::E_Dir >(_impl_.dir_);
}
inline ::protocol::mmo::E_Dir TransformInt::dir() const {
  // @@protoc_insertion_point(field_get:protocol.mmo.TransformInt.dir)
  return _internal_dir();
}
inline void TransformInt::_internal_set_dir(::protocol::mmo::E_Dir value) {
  
  _impl_.dir_ = value;
}
inline void TransformInt::set_dir(::protocol::mmo::E_Dir value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:protocol.mmo.TransformInt.dir)
}

// -------------------------------------------------------------------

// ObjectInfo

// int32 id = 1;
inline void ObjectInfo::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ObjectInfo::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ObjectInfo::id() const {
  // @@protoc_insertion_point(field_get:protocol.mmo.ObjectInfo.id)
  return _internal_id();
}
inline void ObjectInfo::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ObjectInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.mmo.ObjectInfo.id)
}

// .protocol.mmo.E_ObjectState state = 2;
inline void ObjectInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::protocol::mmo::E_ObjectState ObjectInfo::_internal_state() const {
  return static_cast< ::protocol::mmo::E_ObjectState >(_impl_.state_);
}
inline ::protocol::mmo::E_ObjectState ObjectInfo::state() const {
  // @@protoc_insertion_point(field_get:protocol.mmo.ObjectInfo.state)
  return _internal_state();
}
inline void ObjectInfo::_internal_set_state(::protocol::mmo::E_ObjectState value) {
  
  _impl_.state_ = value;
}
inline void ObjectInfo::set_state(::protocol::mmo::E_ObjectState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:protocol.mmo.ObjectInfo.state)
}

// .protocol.mmo.TransformInt transform = 3;
inline bool ObjectInfo::_internal_has_transform() const {
  return this != internal_default_instance() && _impl_.transform_ != nullptr;
}
inline bool ObjectInfo::has_transform() const {
  return _internal_has_transform();
}
inline void ObjectInfo::clear_transform() {
  if (GetArenaForAllocation() == nullptr && _impl_.transform_ != nullptr) {
    delete _impl_.transform_;
  }
  _impl_.transform_ = nullptr;
}
inline const ::protocol::mmo::TransformInt& ObjectInfo::_internal_transform() const {
  const ::protocol::mmo::TransformInt* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::mmo::TransformInt&>(
      ::protocol::mmo::_TransformInt_default_instance_);
}
inline const ::protocol::mmo::TransformInt& ObjectInfo::transform() const {
  // @@protoc_insertion_point(field_get:protocol.mmo.ObjectInfo.transform)
  return _internal_transform();
}
inline void ObjectInfo::unsafe_arena_set_allocated_transform(
    ::protocol::mmo::TransformInt* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.mmo.ObjectInfo.transform)
}
inline ::protocol::mmo::TransformInt* ObjectInfo::release_transform() {
  
  ::protocol::mmo::TransformInt* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::mmo::TransformInt* ObjectInfo::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:protocol.mmo.ObjectInfo.transform)
  
  ::protocol::mmo::TransformInt* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::protocol::mmo::TransformInt* ObjectInfo::_internal_mutable_transform() {
  
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::mmo::TransformInt>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::protocol::mmo::TransformInt* ObjectInfo::mutable_transform() {
  ::protocol::mmo::TransformInt* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:protocol.mmo.ObjectInfo.transform)
  return _msg;
}
inline void ObjectInfo::set_allocated_transform(::protocol::mmo::TransformInt* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:protocol.mmo.ObjectInfo.transform)
}

// bool flipX = 4;
inline void ObjectInfo::clear_flipx() {
  _impl_.flipx_ = false;
}
inline bool ObjectInfo::_internal_flipx() const {
  return _impl_.flipx_;
}
inline bool ObjectInfo::flipx() const {
  // @@protoc_insertion_point(field_get:protocol.mmo.ObjectInfo.flipX)
  return _internal_flipx();
}
inline void ObjectInfo::_internal_set_flipx(bool value) {
  
  _impl_.flipx_ = value;
}
inline void ObjectInfo::set_flipx(bool value) {
  _internal_set_flipx(value);
  // @@protoc_insertion_point(field_set:protocol.mmo.ObjectInfo.flipX)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mmo
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MMO_5fstruct_2eproto
