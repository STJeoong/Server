// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MMO_enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MMO_5fenum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MMO_5fenum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MMO_5fenum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MMO_5fenum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MMO_5fenum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace mmo {

enum E_PacketID : int {
  ENTER_GAME_REQ = 0,
  ENTER_GAME_RESP = 1,
  PLAYER_ENTER_NOTIFY = 2,
  PLAYER_EXIT_NOTIFY = 3,
  E_PacketID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_PacketID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_PacketID_IsValid(int value);
constexpr E_PacketID E_PacketID_MIN = ENTER_GAME_REQ;
constexpr E_PacketID E_PacketID_MAX = PLAYER_EXIT_NOTIFY;
constexpr int E_PacketID_ARRAYSIZE = E_PacketID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_PacketID_descriptor();
template<typename T>
inline const std::string& E_PacketID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_PacketID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_PacketID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_PacketID_descriptor(), enum_t_value);
}
inline bool E_PacketID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_PacketID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_PacketID>(
    E_PacketID_descriptor(), name, value);
}
enum E_RespCode : int {
  OK = 0,
  NO = 1,
  E_RespCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_RespCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_RespCode_IsValid(int value);
constexpr E_RespCode E_RespCode_MIN = OK;
constexpr E_RespCode E_RespCode_MAX = NO;
constexpr int E_RespCode_ARRAYSIZE = E_RespCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_RespCode_descriptor();
template<typename T>
inline const std::string& E_RespCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_RespCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_RespCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_RespCode_descriptor(), enum_t_value);
}
inline bool E_RespCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_RespCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_RespCode>(
    E_RespCode_descriptor(), name, value);
}
enum E_ObjectState : int {
  NONE = 0,
  IDLE = 1,
  E_ObjectState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_ObjectState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_ObjectState_IsValid(int value);
constexpr E_ObjectState E_ObjectState_MIN = NONE;
constexpr E_ObjectState E_ObjectState_MAX = IDLE;
constexpr int E_ObjectState_ARRAYSIZE = E_ObjectState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_ObjectState_descriptor();
template<typename T>
inline const std::string& E_ObjectState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_ObjectState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_ObjectState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_ObjectState_descriptor(), enum_t_value);
}
inline bool E_ObjectState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_ObjectState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_ObjectState>(
    E_ObjectState_descriptor(), name, value);
}
enum E_Dir : int {
  BOTTOM = 0,
  LEFT = 1,
  UP = 2,
  RIGHT = 3,
  MAX = 4,
  E_Dir_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_Dir_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_Dir_IsValid(int value);
constexpr E_Dir E_Dir_MIN = BOTTOM;
constexpr E_Dir E_Dir_MAX = MAX;
constexpr int E_Dir_ARRAYSIZE = E_Dir_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_Dir_descriptor();
template<typename T>
inline const std::string& E_Dir_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_Dir>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_Dir_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_Dir_descriptor(), enum_t_value);
}
inline bool E_Dir_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_Dir* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_Dir>(
    E_Dir_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mmo
}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::mmo::E_PacketID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::mmo::E_PacketID>() {
  return ::protocol::mmo::E_PacketID_descriptor();
}
template <> struct is_proto_enum< ::protocol::mmo::E_RespCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::mmo::E_RespCode>() {
  return ::protocol::mmo::E_RespCode_descriptor();
}
template <> struct is_proto_enum< ::protocol::mmo::E_ObjectState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::mmo::E_ObjectState>() {
  return ::protocol::mmo::E_ObjectState_descriptor();
}
template <> struct is_proto_enum< ::protocol::mmo::E_Dir> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::mmo::E_Dir>() {
  return ::protocol::mmo::E_Dir_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MMO_5fenum_2eproto
